
(* missing main *)
function notmain(a:integer,b:integer) : integer
	print(multiply(a,b))
	0

(* function returns wrong value type *)	
function square(a: integer) : integer	
	print(a*a)					
	true						

(* function passes wrong number of arguments *)
function add_squares(a: integer, b: integer): integer
    square(a,b)

(* function with variable that doesn’t exist *)
function call_addsquare(a: integer, b:integer) : integer
	add_squares(a,c)

(* function passing wrong argument type *)
function logic_check(a:integer, b:boolean) : boolean
	if call_addsquare(a,b) = ((a*a)+(b*b)) then
		true
	else
		false

(* function using wrong value for the operator *)
function is_invalid(a:integer, b:integer): boolean
	logic_check(a,b) and call_addsquare(b,a)

(* function with invalid if type expression *)
function check_nonzero(b:integer) : boolean
	if b then
		true
	else
		false

(* mismatched then/else clause types *)
function divide(a:integer,b:integer) : integer
	if check_nonzero(b) then
		(a / b)
	else
		false

(* parameters with same name *)
function multiply(x:integer,x:integer): integer
	(x * x)

(* function call doesn’t exist *)
function difference(a:integer, b:integer): integer
	subtract(a,b)

(* functions with same name *)
function difference(a:boolean, b:boolean) : boolean
	(a and b)

(* illegal print function *)
function print(a:integer,b:integer) : integer
	print(difference(a,b))
	0

(* OPTIONAL *)
(* unused variable *)
function resultprint(a:integer,b:integer) : integer
	print(square(a))
	0

(* unused function *)
function calculate_mean(a:integer,b:integer) : integer
	(a + b) / 2

function calculate_meansquare(a:integer, b:integer) : integer
	((square(a) + square(b)) / 2)

(* unnecessary function *)
function redundant(a:integer) : boolean
	(0 < a)
function greater_than(a:integer) : boolean
	redundant(a)

(* code path that can’t execute *)
function is_5_positive(): boolean
	if (0 < 5) then
		true
	else
		false

(* code never terminates. I.E. the semantic analyzer will terminate, but should detect the infinite recursion *)
function loopToN(a:integer,b:integer) : integer
	print(a)
	if a < b then
		loopToN(a,b)
	else
		a
