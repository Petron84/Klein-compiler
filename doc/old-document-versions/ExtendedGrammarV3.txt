<PROGRAM> ::= <DEFINITION-LIST> *make-program*

    <DEFINITION-LIST> ::= ε
			| <DEFINITION> <DEFINITION-LIST> *make-definitionlist*

         <DEFINITION> ::= "function" <IDENTIFIER> *make-identifier* "(" <PARAMETER-LIST> ")" *make-parameterlist*  ":" <TYPE> *make-type* <BODY> *make-definition*

     <PARAMETER-LIST> ::= ε
			| <FORMAL-PARAMETERS>


  <FORMAL-PARAMETERS> ::= <ID-WITH-TYPE> *make-IDType* <FORMAL-PARAMETERS'>

 <FORMAL-PARAMETERS'> ::= ε
			| "," <ID-WITH-TYPE> *make-IDType* <FORMAL-PARAMETERS'>

       <ID-WITH-TYPE> ::= <IDENTIFIER> *make-identifier* ":" <TYPE> *make-type*

               <TYPE> ::= "integer" *make-integertype*
                        | "boolean" *make-booleantype*

               <BODY> ::= <PRINT-EXPRESSION> <BODY>
                        | <EXPR>

   <PRINT-EXPRESSION> ::= "print" "(" <EXPR> ")" *make-functioncall*

         <EXPRESSION> ::= <SIMPLE-EXPRESSION> <EXPRESSION'> *make-expression*

	<EXPRESSION'> ::= ε
			| "=" <SIMPLE-EXPRESSION> *make-binaryexpression* <EXPRESSION'>
                        |"<" <SIMPLE-EXPRESSION> *make-binaryexpression* <EXPRESSION'>

  <SIMPLE-EXPRESSION> ::= <TERM> <SIMPLE-EXPRESSION'>

 <SIMPLE-EXPRESSION'> ::= ε
			| "or" <TERM> *make-binaryexpression* <SIMPLE-EXPRESSION'>
                        | "+" <TERM> *make-binaryexpression* <SIMPLE-EXPRESSION'>
                        | "-" <TERM> *make-binaryexpression* <SIMPLE-EXPRESSION'>

               <TERM> ::= <FACTOR> <TERM'>

	      <TERM'> ::= ε
			| "*" <FACTOR> *make-binaryexpression* <TERM'>
                        | "/" <FACTOR> *make-binaryexpression* <TERM'>
                        | "and" <FACTOR> *make-binaryexpression* <TERM'>

             <FACTOR> ::= <LITERAL> *make-literalexpression*
                        | "not" *make-unaryexpression* <FACTOR>
                        | "-" *make-unaryexpression* <FACTOR>
                        | <IDENTIFIER> *make-identifier* <FACTOR'> *make-functioncall*
                        | "if" <SIMPLE-EXPRESSION> <EXPRESSION'> *make-expression* "then" <SIMPLE-EXPRESSION> <EXPRESSION'> *make-expression* "else" <SIMPLE-EXPRESSION> <EXPRESSION'>*make-expression* *make-ifexpression*
                        | "(" <SIMPLE-EXPRESSION> <EXPRESSION'> ")" *make-expression*

	    <FACTOR'> ::= ε
			| "(" <ARGUMENT-LIST> ")" *make-expressionlist*

      <ARGUMENT-LIST> ::= ε
			| <FORMAL-ARGUMENTS>

   <FORMAL-ARGUMENTS> ::= <SIMPLE-EXPRESSION> <EXPRESSION'> *make-expression* <FORMAL-ARGUMENTS'>

  <FORMAL-ARGUMENTS'> ::= ε
			| "," <SIMPLE-EXPRESSION> <EXPRESSION'> *make-expression* <FORMAL-ARGUMENTS'>

            <LITERAL> ::= <INTEGER-LITERAL> *make-integerliteral*
                        | <BOOLEAN-LITERAL> *make-booleanliteral*