<PROGRAM> ::= <DEFINITION-LIST> *make-program*

    <DEFINITION-LIST> ::= *make-definitionlist*
			| <DEFINITION> <DEFINITION-LIST>

         <DEFINITION> ::= "function" <IDENTIFIER> *make-functionidentifier* "(" <PARAMETER-LIST> ")" ":" <TYPE> *make-type* <BODY> *make-definition*

     <PARAMETER-LIST> ::= make-parameterlist
			| <FORMAL-PARAMETERS>


  <FORMAL-PARAMETERS> ::= <ID-WITH-TYPE> *make-IDType* <FORMAL-PARAMETERS'>

 <FORMAL-PARAMETERS'> ::= *make-parameterlist*
			| "," <ID-WITH-TYPE> *make-IDType* <FORMAL-PARAMETERS'>

       <ID-WITH-TYPE> ::= <IDENTIFIER> *make-identifier* ":" <TYPE> *make-type*

               <TYPE> ::= "integer"
                        | "boolean"

               <BODY> ::= <PRINT-EXPRESSION> <BODY>
                        | <EXPR>

   <PRINT-EXPRESSION> ::= "print" "(" <EXPR> ")" *make-functioncall*

         <EXPRESSION> ::= <SIMPLE-EXPRESSION> <EXPRESSION'>

	<EXPRESSION'> ::= ε
			| "=" <SIMPLE-EXPRESSION> *make-equalexpression* <EXPRESSION'>
                        |"<" <SIMPLE-EXPRESSION> *make-lessexpression* <EXPRESSION'>

  <SIMPLE-EXPRESSION> ::= <TERM> <SIMPLE-EXPRESSION'>

 <SIMPLE-EXPRESSION'> ::= ε
			| "or" <TERM> *make-orexpression* <SIMPLE-EXPRESSION'>
                        | "+" <TERM> *make-addexpression* <SIMPLE-EXPRESSION'>
                        | "-" <TERM> *make-minusexpression* <SIMPLE-EXPRESSION'>

               <TERM> ::= <FACTOR> <TERM'>

	      <TERM'> ::= ε
			| "*" <FACTOR> *make-multiplyexpression* <TERM'>
                        | "/" <FACTOR> *make-divideexpression* <TERM'>
                        | "and" <FACTOR> *make-andexpression* <TERM'>

             <FACTOR> ::= <LITERAL>
                        | "not" *make-notexpression* <FACTOR>
                        | "-" *make-negateexpression* <FACTOR>
                        | <IDENTIFIER> <FACTOR'>
                        | "if" <SIMPLE-EXPRESSION> <EXPRESSION'> "then" <SIMPLE-EXPRESSION> <EXPRESSION'> "else" <SIMPLE-EXPRESSION> <EXPRESSION'> *make-ifexpression*
                        | "(" <SIMPLE-EXPRESSION> <EXPRESSION'> ")"

	    <FACTOR'> ::= *make-identifier*
			| "(" *make-functionidentifier* <ARGUMENT-LIST> ")" *make-functioncall*

      <ARGUMENT-LIST> ::= ε
			| <FORMAL-ARGUMENTS>

   <FORMAL-ARGUMENTS> ::= <SIMPLE-EXPRESSION> <EXPRESSION'> <FORMAL-ARGUMENTS'>

  <FORMAL-ARGUMENTS'> ::= *make-argumentlist*
			| "," <SIMPLE-EXPRESSION> <EXPRESSION'> <FORMAL-ARGUMENTS'>

            <LITERAL> ::= <INTEGER-LITERAL> *make-integerliteral*
                        | <BOOLEAN-LITERAL> *make-booleanliteral*